// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  username       String       @unique
  email          String       @unique
  name           String
  password       String
  location       String?
  avatarURL      String?
  githubUsername String?
  followers      User[]       @relation("FollowRelation", references: [id])
  following      User[]       @relation("FollowRelation", references: [id])
  shops          CoffeeShop[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  likes          Like[]
  comments       Comment[]
}

model CoffeeShopPhoto {
  id           Int        @id @default(autoincrement())
  url          String
  shop         CoffeeShop @relation(fields: [coffeeShopId], references: [id], onDelete: Cascade)
  coffeeShopId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model CoffeeShop {
  id          Int               @id @default(autoincrement())
  name        String
  slug        String            @unique
  latitude    String
  longitude   String
  address     String?
  description String?
  photos      CoffeeShopPhoto[]
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  categories  Category[]
  likes       Like[]
  comments    Comment[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Category {
  id        Int          @id @default(autoincrement())
  name      String
  slug      String       @unique
  shops     CoffeeShop[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Like {
  id           Int        @id @default(autoincrement())
  shop         CoffeeShop @relation(fields: [coffeeShopId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  coffeeShopId Int
  userId       Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([coffeeShopId, userId])
}

model Comment {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop         CoffeeShop @relation(fields: [coffeeShopId], references: [id], onDelete: Cascade)
  userId       Int
  coffeeShopId Int
  payload      String
  rating       Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
